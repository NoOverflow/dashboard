@page "/dashboard"
@using Dashboard.Models
@using Dashboard.Models.Widgets
@using Dashboard.Services
@using Dashboard.Shared.Widgets;
@using Microsoft.AspNetCore.Components.Server.ProtectedBrowserStorage
@using Newtonsoft.Json
@using BlazorContextMenu

@inject SpotifyService Spotify
@inject SessionState SessionState
@inject AuthenticationStateProvider AuthStateProvider
@inject ProtectedLocalStorage BrowserStorage

<PageTitle>Panel</PageTitle>

<AuthorizeView>
    <Authorized>
        <a href="/">
            <img id="logo" src="res/logo.svg" />
        </a>
        
        <div id="background-ellipses">
            <img id="e1" draggable="false" src="res/ellipses/e1.svg" />
            <img id="e2" draggable="false" src="res/ellipses/e2.svg" />
            <img id="e3" draggable="false" src="res/ellipses/e3.svg" />
            <img id="e4" draggable="false" src="res/ellipses/e4.svg" />
            <img id="e5" draggable="false" src="res/ellipses/e5.svg" />
            <img id="e6" draggable="false" src="res/ellipses/e6.svg" />
            <img id="e7" draggable="false" src="res/ellipses/e7.svg" />
        </div>

        @if (ShowWidgetAdderMenu)
        {
            <WidgetAdder SkipToSettings="@SkipToSettings" Index="@WidgetAdderIndex" OnAddWidget="OnAddWidget" />
        } 
        else
        {
            @if (Widgets != null)
            {
                <div id="widgets">
                    <WidgetsContainer StyleId="top-widgets">
                        <WidgetContainer OnWidgetConfigure="OnConfigureWidget" OnWidgetAdderOpen="OnWidgetAdderOpen" OnWidgetRemove="OnRemoveWidget" OrderId="0" WidgetIndex="0" Style="top" Widget="@(Widgets[0])" />
                        <WidgetContainer OnWidgetConfigure="OnConfigureWidget" OnWidgetAdderOpen="OnWidgetAdderOpen" OnWidgetRemove="OnRemoveWidget" OrderId="1" WidgetIndex="1" Style="top" Widget="@(Widgets[1])" />
                        <WidgetContainer OnWidgetConfigure="OnConfigureWidget" OnWidgetAdderOpen="OnWidgetAdderOpen" OnWidgetRemove="OnRemoveWidget" OrderId="2" WidgetIndex="2" Style="top" Widget="@(Widgets[2])" />
                    </WidgetsContainer>

                    <WidgetsContainer StyleId="middle-widgets">
                        <WidgetContainer OnWidgetConfigure="OnConfigureWidget" OnWidgetAdderOpen="OnWidgetAdderOpen" OnWidgetRemove="OnRemoveWidget" OrderId="0" WidgetIndex="3" Style="middle-one" Widget="@(Widgets[3])" />
                        <WidgetContainer OnWidgetConfigure="OnConfigureWidget" OnWidgetAdderOpen="OnWidgetAdderOpen" OnWidgetRemove="OnRemoveWidget" OrderId="1" WidgetIndex="4" Style="middle-two" Widget="@(Widgets[4])" />
                        <WidgetContainer OnWidgetConfigure="OnConfigureWidget" OnWidgetAdderOpen="OnWidgetAdderOpen" OnWidgetRemove="OnRemoveWidget" OrderId="2" WidgetIndex="5" Style="middle-three" Widget="@(Widgets[5])" />
                    </WidgetsContainer>

                    <WidgetsContainer StyleId="bottom-widgets">
                        <WidgetContainer OnWidgetConfigure="OnConfigureWidget" OnWidgetAdderOpen="OnWidgetAdderOpen" OnWidgetRemove="OnRemoveWidget" OrderId="0" WidgetIndex="6" Style="bottom-one" Widget="@(Widgets[6])" />
                        <WidgetContainer OnWidgetConfigure="OnConfigureWidget" OnWidgetAdderOpen="OnWidgetAdderOpen" OnWidgetRemove="OnRemoveWidget" OrderId="1" WidgetIndex="7" Style="bottom-two" Widget="@(Widgets[7])" />
                        <WidgetContainer OnWidgetConfigure="OnConfigureWidget" OnWidgetAdderOpen="OnWidgetAdderOpen" OnWidgetRemove="OnRemoveWidget" OrderId="2" WidgetIndex="8" Style="bottom-three" Widget="@(Widgets[8])" />
                    </WidgetsContainer>
                </div>
            }
        }
        @if (ShowServicesMenu)
        {
            <ServicesMenu />
        }
        <img id="services-menu" @onclick="@OnOpenServicesMenuButtonClicked" src="res/three_dots.svg" width="7" height="29" />
    </Authorized>
    <NotAuthorized>
        <p>You cannot access this page as you're not authenticated.</p>
    </NotAuthorized>
</AuthorizeView>

@code {
    public WidgetModel?[] Widgets = null;

    bool ShowServicesMenu = false;
    bool ShowWidgetAdderMenu = false;
    bool SkipToSettings = false;
    private int WidgetAdderIndex = 0; 

    private async Task<bool> LoadWidgetPanelLayout()
    {
        var result = await BrowserStorage.GetAsync<string>("panel_layout");

        if (!result.Success)
            return false;
        var widgets = JsonConvert.DeserializeObject<WidgetModel?[]>(result.Value!);
        this.Widgets = widgets;
        StateHasChanged();
        return true;
    }

    private void Test()
    {
        Console.Write("");
    }

    private async Task SaveWidgetPanelLayout()
    {
        await BrowserStorage.SetAsync("panel_layout", JsonConvert.SerializeObject(Widgets));
    }

    protected override async void OnAfterRender(bool firstRender)
    {
        if (firstRender && !(await LoadWidgetPanelLayout()))
        {
            for (int i = 0; i < Widgets.Length; i++)
                Widgets[i] = null;
            StateHasChanged();
        }
        base.OnAfterRender(firstRender);
    }

    protected override async Task OnInitializedAsync()
    {
        try
        {
            if (!(await LoadWidgetPanelLayout()))
            {
                Widgets = new WidgetModel?[9];
                for (int i = 0; i < Widgets.Length; i++)
                    Widgets[i] = null;
            }
            StateHasChanged();
        } 
        catch (Exception ex)
        {

        }
        await base.OnInitializedAsync();
    }

    private void OnOpenServicesMenuButtonClicked()
    {
        ShowServicesMenu = !ShowServicesMenu;   
    }

    private void OnWidgetAdderOpen(int requestingWidgetIndex)
    {
        SkipToSettings = false;
        WidgetAdderIndex = requestingWidgetIndex;
        ShowWidgetAdderMenu = true;
        StateHasChanged();
    }

    private async void OnAddWidget(WidgetModel widget, int index)
    {
        Widgets[index] = widget;
        ShowWidgetAdderMenu = false;
        await SaveWidgetPanelLayout();
        StateHasChanged();
    }

    private async void OnRemoveWidget(int index)
    {
        Widgets[index] = null;
        await SaveWidgetPanelLayout();
        StateHasChanged();
    }

    private async void OnConfigureWidget(int index)
    {
        SkipToSettings = true;
        WidgetAdderIndex = index;
        ShowWidgetAdderMenu = true;
        StateHasChanged();
    }
}
