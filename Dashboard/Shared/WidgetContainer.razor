@using Dashboard.Models;
@using Dashboard.Models.Widgets
@using Dashboard.Services
@using Dashboard.Shared.Widgets
@using BlazorContextMenu

<ContextMenu Id="@("CtxMenu2" + @WidgetIndex)">
    <Item OnClick="@OnWidgetConfigureClick">Configure Widget</Item>
    <Item OnClick="@OnWidgetRemoveClick">Delete Widget</Item>
</ContextMenu>


<div class="card draggable @Style" style="order: @OrderId;" draggable="true" id="content"
        ondragover="event.preventDefault();" 
        @ondragstart="@OnDragStart" @ondrop="@OnDragDrop" @onclick="@OnClick">
   <ContextMenuTrigger MenuId="@("CtxMenu2" + @WidgetIndex)">
        <DynamicComponent Parameters="DynamicParameters" Type="@((Widget == null ? new AddWidgetModel() : Widget).SubRendererType)" />   
    </ContextMenuTrigger>
</div>

@code {
    [CascadingParameter]
    public WidgetsContainer Container { get; set; } = null;

    [Parameter]
    public WidgetModel? Widget { get; set; }

    [Parameter]
    public int OrderId { get; set; } = 0;

    [Parameter]
    public int WidgetIndex { get; set; } = 0;

    [Parameter]
    public string Style { get; set; } = "";

    [Parameter]
    public Action<int>? OnWidgetAdderOpen { get; set; } = null;

    [Parameter]
    public Action<int>? OnWidgetRemove { get; set; } = null;

    [Parameter]
    public Action<int>? OnWidgetConfigure { get; set; } = null;

    private Guid WidgetId;
    private bool ShowMenu = false;
    private Dictionary<string, object> DynamicParameters = new Dictionary<string, object>();

    protected override void OnInitialized()
    {
        if (Widget != null && DynamicParameters.Count == 0)
            DynamicParameters.Add("Widget", Widget);
        WidgetId = Guid.NewGuid();
        base.OnInitialized();
    }

    void OnDragStart(DragEventArgs e)
    {
        if (Container != null)
        {
            Container.DraggedWidget = this;
        }
    }

    void OnDragDrop(DragEventArgs e)
    {
        int holder = this.OrderId;

        if (Container != null && Container.DraggedWidget != null) 
        {
            this.OrderId = Container.DraggedWidget.OrderId;
            Container.DraggedWidget.OrderId = holder;
            Container.DraggedWidget.StateHasChanged();
            Container.DraggedWidget = null;
        }
    }

    void OnClick()
    {
        if (Widget != null)
            return;
        OnWidgetAdderOpen?.Invoke(WidgetIndex);
    }

    void OnWidgetRemoveClick(ItemClickEventArgs e)
    {
        if (Widget == null)
            return;
        OnWidgetRemove?.Invoke(WidgetIndex);
    }

    void OnWidgetConfigureClick(ItemClickEventArgs e)
    {
        if (Widget == null)
            return;
        OnWidgetConfigure?.Invoke(WidgetIndex);
    }
}
