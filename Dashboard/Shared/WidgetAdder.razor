@using Dashboard.Models
@using Dashboard.Models.Widgets
@using Dashboard.Services
@inject ServicesFactoryService ServiceFactory

<div id="container">
    <div id="subcontainer">
        @if ((SettingsPanelVisible || SkipToSettings) && @SelectedWidget != null)
        {
            <DynamicComponent Parameters="@DynamicParameters" Type="@(SelectedWidget.SubSettingsType)" />  
            <div id="confirm-button" @onclick="OnValidateSettingsClick"><p>Confirm</p></div>
        } 
        else
        {
            @foreach (var widget in Widgets)
            {
                <ul>
                    <li>
                        <div @onclick="@(() => OnAddWidgetClick(widget))">
                            <h1>@(widget.FriendlyName)</h1>
                            <p>@(widget.Description)</p>
                        </div>
                    </li>
                </ul>
            }
        }   
    </div>
</div>

@code {

    [Parameter]
    public Action<WidgetModel, int>? OnAddWidget { get; set; }

    [Parameter]
    public int Index { get; set; }

    [Parameter]
    public bool SkipToSettings { get; set; } = false;

    private bool SettingsPanelVisible = false;

    private WidgetModel SelectedWidget { get; set; }
    private Dictionary<string, object> DynamicParameters = new Dictionary<string, object>();
    private List<WidgetModel> Widgets { get; set; } = new List<WidgetModel>();

    protected override void OnInitialized()
    {
        base.OnInitialized();
        foreach (var kvp in ServiceFactory.ServicesTypesList)
        {
            foreach (var widget in kvp.Value)
            {
                Widgets.Add((WidgetModel)(Activator.CreateInstance(widget)!));
            }
            
        }
    }

    private void OnAddWidgetClick(WidgetModel widget)
    {
        SelectedWidget = widget;
        DynamicParameters.Add("Widget", widget);
        SettingsPanelVisible = true;
    }

    private void OnValidateSettingsClick()
    {
        OnAddWidget?.Invoke(SelectedWidget, Index);
    }
}
