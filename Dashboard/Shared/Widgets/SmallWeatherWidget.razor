@using Dashboard.Models
@using Dashboard.Models.WeatherApi
@using Dashboard.Models.Widgets
@using Dashboard.Services
@using Dashboard.Services.Widget
@inject WeatherService WeatherService
@inject UpdateService UpdateService

<div>
    <h2>@(Weather == null ? "" : Weather.Current.TempC + "°c")</h2> 
</div>

@code {
    [Parameter]
    public WidgetModel? Widget { get; set; }

    private Weather? Weather {  get;  set; }

    private async void OnRefreshTriggered()
    {
        if (Weather == null)
            return;
        Weather = await WeatherService.GetWeatherAsync((string)Widget.Settings["City"]);
        await this.InvokeAsync(StateHasChanged);
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        await base.OnAfterRenderAsync(firstRender);
    }

    protected override async Task OnInitializedAsync()
    {
        // Make this a setting
        Weather = await WeatherService.GetWeatherAsync((string)Widget.Settings["City"]);
        UpdateService.Subscribe(Widget!, OnRefreshTriggered); 
        await base.OnInitializedAsync();
    }
}
