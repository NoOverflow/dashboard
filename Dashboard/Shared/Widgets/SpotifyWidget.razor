@using Dashboard.Models.Spotify
@using Dashboard.Models
@using Dashboard.Services
@using Dashboard.Shared.Widgets;
@inject SpotifyService SpotifyService
@inject SessionState SessionState
@inject AuthenticationStateProvider AuthStateProvider
@inject HttpClient HttpClient
@inject OAuthManagerService OAuthManager

<div id="widget">
    <img id="song-img" width="50" height="50" src="@(CurrentTrack == null ? "" : CurrentTrack?.Item.Album.Images[1].Url)" />
    <div id="song-data">
        <h1 id="song-name">@(CurrentTrack == null ? "No track" : CurrentTrack?.Item?.Name)</h1>
        <p id="artist-name">@(CurrentTrack == null ? "No artist" : CurrentTrack?.Item?.Artists[0].Name)</p>
    </div>
    <img @onclick="OnPlayPauseButtonClick" id="pause-btn" src="@(CurrentTrack == null ? "res/play.svg" : ((bool)(CurrentTrack.IsPlaying) ? "res/pause.svg" : "res/play.svg"))" width="20px" height="28px"/>
</div>

@code {
    private CurrentlyPlayingTrack? CurrentTrack { get; set; } = null;

    protected override async Task OnInitializedAsync()
    {
        var authState = await AuthStateProvider.GetAuthenticationStateAsync();

        await OAuthManager.RefreshToken(ServiceType.Spotify, authState.User);
        CurrentTrack = await SpotifyService.GetCurrentlyPlayingTrack(authState.User);
        await base.OnInitializedAsync();
    }

    async void OnPlayPauseButtonClick()
    {
        var authState = await AuthStateProvider.GetAuthenticationStateAsync();

        if (CurrentTrack == null)
            return;
        if ((bool)CurrentTrack.IsPlaying)
        {
            await SpotifyService.Pause(authState.User);
            CurrentTrack.IsPlaying = false;
        } 
        else
        {
            await SpotifyService.PlayOrResume(authState.User);
            CurrentTrack.IsPlaying = true;
        }     
        this.StateHasChanged();
    }
}
