@using Dashboard.Models
@using Dashboard.Models.Widgets
@using Dashboard.Services
@using Dashboard.Services.Widget
@inject NYTimesService NYTimesService
@inject UpdateService UpdateService

<div>
    <a href="@(Content == null ? "/dashboard" : Content.Results[CurrentNewsIndex].Url)">
        @(Content == null ? "Loading news" : Content.Results[CurrentNewsIndex].Title)
    </a>
    <p>@(Content == null ? "" : Content.Results[CurrentNewsIndex].Abstract)</p>
</div>


@code {
    [Parameter]
    public WidgetModel? Widget { get; set; }

    private int CurrentNewsIndex = 0;
    private Models.NYTimes.Content? Content = null;

    [ContextStatic]
    private bool ContentSet = false;

    private async void OnRefreshTriggered()
    {
        if (Content == null)
            return;
        if (Widget != null && !ContentSet)
        {
            Content = await NYTimesService.GetLiveContentAsync((string)Widget.Settings["Source"], (string)Widget.Settings["Section"]);
            ContentSet = true;
        }
    }

    protected override async Task OnInitializedAsync()
    {
        if (Widget != null && !ContentSet)
        {
            Content = await NYTimesService.GetLiveContentAsync((string)Widget.Settings["Source"], (string)Widget.Settings["Section"]);
            ContentSet = true;
        }
        UpdateService.Subscribe(Widget!, OnRefreshTriggered); 
        await base.OnInitializedAsync();
    }
}
